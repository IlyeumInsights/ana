:mod:`Election`
===============

.. py:module:: Election

.. autoapi-nested-parse::

   module Election

   Election/voting procedure for selection and/or decision making according to
   multiple sources.
   Election can be configured in various way, and exported for further elections.

   Classes:
       Candidate
           Represents a possible option in the election and its counts. It mainly
           carries comparison operators.
       Election
           Carries election modalities and performs the vote.

   :Authors: Nathan Ramoly



Module Contents
---------------

.. py:class:: Candidate(value, count=0, pcount=0)

   class Candidate

   Represents a possible election options.
   This class carries comparison operators and its main role is to ease
   comparison between candidates.

   :param value: Name/id of the candidate
   :type value: str
   :param count: Number of vote for this candidate.
   :type count: int
   :param pcount: Ponderated count.
   :type pcount: int

   .. method:: __lt__(self, other)



   .. method:: __gt__(self, other)



   .. method:: __eq__(self, other)



   .. method:: __ne__(self, other)



   .. method:: __le__(self, other)



   .. method:: __ge__(self, other)



   .. method:: __str__(self)




.. py:class:: Election(path=None, mode=None, default=None, priority=None, resultlvl=None)

   class Election

   Represents the election process for decision making or selection.
   Several parameters can be adjusted for the election.

   :param path: Path of the serialized election to import. 'None' by default.
   :type path: str (filepath)

   :param mode: Vote mode; defines the way ballots are counted.
       - 'std' (standard): normal counting
       - 'ato' (at least one): count the default value
       - 'pnd' (ponderated): count with weighted ballots. Without provided
       weights, the order defines the ponderation.
       - 'not' (nothing but): count by excluding the selected candidate.
   :type mode: str

   :param default: Default value, behavior varies according to the mode:
       - std:he default value is the selected one in case of equality.
       - ato: the default value is the one that is counted.
       - not: values different than the default value are returned.
       - pnd:the default value is the selected one in case of equality.
   :type default: str

   :param priority: Priority mode.
       - 'first': asceding importance (first ballots have more weights)
       - 'last': descending importance (last ballots have more weights)
   :type priority: str

   :param resultlvl: Verbosity of the output.
       - 'min' (minimal): returns only the candidate with the most votes and
       priority.
       - 'ele' (elected): returns all candidates with the most votes (equality)
       - 'ful' (full): returns all candidates in order associated with their
       respective counts.
   :type resultlvl: str

   .. attribute:: VOTEMODE
      :annotation: = ['std', 'ato', 'pnd', 'not']

      

   .. attribute:: PRIOMODE
      :annotation: = ['first', 'last']

      

   .. attribute:: RESLEVEL
      :annotation: = ['min', 'ele', 'ful']

      

   .. method:: counting(self, ballots, ponderation=None)


      counting Method

      Performs the vote and countings.

      :param ballots: List of elements that are to be counted. Elements should
      be comparable.
      :type ballots: list(any)

      :param ponderation: Associated list of weights. There should be as
      many weights as there are elements in the ballots list.
      :type ponderation: list(float)

      :return: Selected element(s) or list of elements with their count.
      (depends on the selected 'resultlvl')


   .. method:: _countingStd(self, ballots)



   .. method:: _countingAto(self, ballots)



   .. method:: _countingPnd(self, ballots, ponderation=None)



   .. method:: _countingNot(self, ballots)



   .. method:: export(self, path)


      export method

      Exports election modalities (parameters) into a file.
      It can be seen as an election template.

      :param path: Export destination.
      :type path: str (filePath)



.. data:: VOTE
   

   

