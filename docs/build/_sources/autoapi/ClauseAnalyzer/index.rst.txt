:mod:`ClauseAnalyzer`
=====================

.. py:module:: ClauseAnalyzer

.. autoapi-nested-parse::

   module ClauseAnalyzer
   ************************

   Performs clause classification, from phase 1 (type) to phase 3 (anomaly type).
   All models shall be already trained before using this module.

   .. todo:: In the future, it should include a server that receives a clause,
       classifies it and sends back the result of classification.

   :Functions:
       analyzeClause:
           Analyze a given clause and provides its infered type,
           anomaly and violated policy

   :Author: Nathan Ramoly



Module Contents
---------------

.. function:: evaluateModels(clause, phaseDir, modelNames, sentVote)

   evaluateModels

   Applies a clause on a set of models, of a given phase, that perform
   similar classifications.
   Clauses can be analyze according to various granularity.
   When model works on a smaller scale (than the clause), results are
   aggregated back at clause level through an election process.

   :param clause: The textual clause. Mandatory argument.
   :type clause: str
   :param phaseDir: Path to the directory containing the models of the
       selected evaluation phase.
   :type phaseDir: str (filepath)
   :param modelNames: List of models to apply to the clause.
   :type modelNames: list(str)
   :param modelNames: Sentence election mode, currently not used.
   :type modelNames: str

   :return:
       - The list of classification outcomes per model (list(int)).
       - The list of mappings label/class (list(map)).


.. function:: evaluateClauseTypeVocab(clause, mapping)

   evaluateClauseTypeVocab

   Evaluates the clause by key word search rather than ML classification.
   Vocabulary is provided, for now, in a file at a fixed location.
   It is mainly used to infer the clause type.

   :param clause: The textual clause. Mandatory argument.
   :type clause: str
   :param mapping: Mapping between labels and class.
   :type mapping: dict(int,str)

   :return: Inferred class.
   :rtype: str


.. function:: evaluatePhaseOne(clause, clauseTitle=None)

   evaluatePhaseOne

   Performs the phase one of the classification.
   Uses trained models of phase one and key word research to infer the type
   of the clause.

   :param clause: The textual clause.
   :type clause: str
   :param clauseTitle: The title of the clause, that is used for key word
       search, defaults to 'None'.
   :type clauseTitle: str

   :return: The inferred type of the clause.
   :rtype: str


.. function:: evaluatePhaseTwo(clause, clauseType)

   evaluatePhaseTwo

   Performs the phase two of the classification knowing the type of the clause.
   It uses trained models of phase two to assert if the clause is anomalous.

   :param clause: The textual clause.
   :type clause: str
   :param clauseType: Type of the clause inferred in phase one or provided.
   :type clauseType: str

   :return: True if the clause is detected as anomalous, False otherwise.
   :rtype: bool


.. function:: evaluatePhaseThree(clause, clauseType)

   evaluatePhaseThree

   Performs the phase three of the classification process knowing the type
   of the clause.
   It uses trained models of phase three to infer the policies violated by the
   clause.

   :param clause: The textual clause.
   :type clause: :py:class:`str`
   :param clauseType: Type of the clause inferred in phase one or provided.
   :type clauseType: :py:class:`str`

   :return: List of inferred violted policies
   :rtype: list(str)


.. function:: analyzeClause(clause, clauseTitle=None)

   analyzeClause

   Core function of clause analysis.
   Performs the full analysis (phase 1 to 3) of a clause.
   It first determines the type of the clause (phase 1).
   Then according to the outcome of phase 1, determines if the clause is
   anomalous or correct.
   If the clause is detected an anomalous, phase 3 is performed to infer
   the violated policies, thus explaining the rejection of the clause.

   :param clause: The textual clause.
   :type clause: str
   :param clauseTitle: The title of the clause, that is used for key word
       search, defaults to 'None'.
   :type clauseTitle: str

   :return:
       - The inferred type of the clause (str).
       - True if the clause is detected as anomalous, False otherwise (bool).
       - List of inferred violted policies (list(str)).


.. function:: convertLabelToVal(label, classList)

   convertLabelToVal

   Convert a textual label to its numeric counterpart .

   :param label: Label to convert.
   :type label: str
   :param classList: List of classes.
   :type classList: list(str)

   :return: The numerical identifier of the label (that is its position in the
       list)
   :rtype: int


.. function:: evaluationOnTestSet()

   evaluationOnTestSet

   Evalluates the quality of the process.
   Used for debugging and ML conception.


